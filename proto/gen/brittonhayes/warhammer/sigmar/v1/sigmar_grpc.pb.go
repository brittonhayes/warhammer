// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sigmarv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SigmarServiceClient is the client API for SigmarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigmarServiceClient interface {
	CreateUnit(ctx context.Context, in *CreateUnitRequest, opts ...grpc.CallOption) (*CreateUnitResponse, error)
	GetUnit(ctx context.Context, in *GetUnitRequest, opts ...grpc.CallOption) (*GetUnitResponse, error)
}

type sigmarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigmarServiceClient(cc grpc.ClientConnInterface) SigmarServiceClient {
	return &sigmarServiceClient{cc}
}

func (c *sigmarServiceClient) CreateUnit(ctx context.Context, in *CreateUnitRequest, opts ...grpc.CallOption) (*CreateUnitResponse, error) {
	out := new(CreateUnitResponse)
	err := c.cc.Invoke(ctx, "/brittonhayes.warhammer.sigmar.v1.SigmarService/CreateUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sigmarServiceClient) GetUnit(ctx context.Context, in *GetUnitRequest, opts ...grpc.CallOption) (*GetUnitResponse, error) {
	out := new(GetUnitResponse)
	err := c.cc.Invoke(ctx, "/brittonhayes.warhammer.sigmar.v1.SigmarService/GetUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigmarServiceServer is the server API for SigmarService service.
// All implementations should embed UnimplementedSigmarServiceServer
// for forward compatibility
type SigmarServiceServer interface {
	CreateUnit(context.Context, *CreateUnitRequest) (*CreateUnitResponse, error)
	GetUnit(context.Context, *GetUnitRequest) (*GetUnitResponse, error)
}

// UnimplementedSigmarServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSigmarServiceServer struct {
}

func (UnimplementedSigmarServiceServer) CreateUnit(context.Context, *CreateUnitRequest) (*CreateUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnit not implemented")
}
func (UnimplementedSigmarServiceServer) GetUnit(context.Context, *GetUnitRequest) (*GetUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnit not implemented")
}

// UnsafeSigmarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigmarServiceServer will
// result in compilation errors.
type UnsafeSigmarServiceServer interface {
	mustEmbedUnimplementedSigmarServiceServer()
}

func RegisterSigmarServiceServer(s grpc.ServiceRegistrar, srv SigmarServiceServer) {
	s.RegisterService(&SigmarService_ServiceDesc, srv)
}

func _SigmarService_CreateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigmarServiceServer).CreateUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brittonhayes.warhammer.sigmar.v1.SigmarService/CreateUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigmarServiceServer).CreateUnit(ctx, req.(*CreateUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigmarService_GetUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigmarServiceServer).GetUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/brittonhayes.warhammer.sigmar.v1.SigmarService/GetUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigmarServiceServer).GetUnit(ctx, req.(*GetUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SigmarService_ServiceDesc is the grpc.ServiceDesc for SigmarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigmarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "brittonhayes.warhammer.sigmar.v1.SigmarService",
	HandlerType: (*SigmarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUnit",
			Handler:    _SigmarService_CreateUnit_Handler,
		},
		{
			MethodName: "GetUnit",
			Handler:    _SigmarService_GetUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "brittonhayes/warhammer/sigmar/v1/sigmar.proto",
}
